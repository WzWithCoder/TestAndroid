apply plugin: 'com.android.application'

//apply plugin: com.wz.gradle.PluginImpl
apply plugin: 'excp_plugin'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import com.wz.gradle.Constants
import java.util.function.Consumer

exceptionConfig {
    processor = "com/example/wangzheng/ExceptionProcessor"
    method = "pushException"
    signature = "(Ljava/lang/Throwable;)V"
    //默认处理所有异常
    exception = [/*"java/lang/NullPointerException"*/]
    pakages = [
            "com.example.wangzheng",
            "com.ymt.server"
    ]
}
android {
    compileSdkVersion CompileSdkVersion
    buildToolsVersion BuildToolsVersion

    defaultConfig {
        applicationId "com.example.wangzheng"
        minSdkVersion MinSdkVersion
        targetSdkVersion TargetSdkVersion
        versionName "0.0.1"

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                className 'com.annotation.compiler.InjectProcessor'
                className 'com.annotation.compiler.RouteProcessor'
                arguments = [moduleName: applicationId]
            }
        }
//        externalNativeBuild {
//            cmake {
//                //arguments '-DANDROID_PLATFORM=android-9'
//                cppFlags "-frtti -fexceptions -std=c++14"
//            }
//            ndk {
//                moduleName "native-lib"
//                abiFilters "armeabi", "x86"
//                stl "stlport_static"  //debug c
//                //ldLibs "log", "z", "m" , "android"
//            }
//        }
        externalNativeBuild {
            cmake {
                //cppFlags '-Wall -Wextra -Werror'
                cppFlags '-fvisibility=hidden -frtti -fexceptions -std=c++14'
            }
        }
    }
    externalNativeBuild {
        /*ndkBuild {
            path 'src/main/jni/Android.mk'
            path 'src/main/jni/Application.mk'
        }*/
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }

    file('chanels').readLines().forEach(
            new Consumer<String>() {
                void accept(String chanel) {
                    println chanel
                }
            })

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            jni.srcDirs = ['src/main/jni']
            jniLibs.srcDirs = ['src/main/jniLibs']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            signingConfig null
        }
        debug {
            jniDebuggable true
        }
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress "html"  //表示不让aapt压缩的文件后缀
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    //resourcePrefix "public_"
}

//android.applicationVariants.all { variant ->
//    variant.outputs.each { output ->
//        def lintTask = tasks["lint${variant.name.capitalize()}"]
//        output.assemble.dependsOn lintTask
//    }
//}


//1 compile是从repository（默认是jCenter())里下载一个依赖包进行编译并打包。
//2 provided只提供编译支持，但是不会写入apk。比如我在编译的时候对某一个jar文件有依赖，但是最终打包apk文件时，我不想把这个jar文件放进去，可以用这个命令。
//3 compile files是从本地的libs目录下寻找picasso-2.4.0.jar这个文件进行编译并打包。类似的命令有`compile fileTree(dir: 'libs', include: '*.jar')`意思是将libs目录下所有jar文件进行编译并打包。
//4 compile project是将另一个module（等同eclipse中的library库文件)进行编译并打包。
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':common-api')
    annotationProcessor project(':annotation-processor')
    //lintChecks project(':lint-checker')

    implementation project(':lint-module')

    implementation project(':ymtserver')
    implementation project(':skin')
    implementation project(':annotation')
    implementation project(':kotlin')
    implementation project(':accessibility-service')
    implementation project(':opengl')
    implementation project(':spi')

    implementation ConstraintLayout
    implementation Design
    implementation GridlayoutV7
    implementation CardviewV7
    implementation SupportV4
    implementation CardviewV7
    implementation Okhttp
    implementation Gson
    implementation Javapoet
    implementation RxJava
    implementation RxAndroid
    implementation Rxpermissions
    implementation Glide
    implementation Retrofit
    implementation RetrofitConverteGson
    implementation Palette
    implementation KotlinStdlib
    implementation ConnectionClass
    implementation Kpswitch

    implementation Constants.CommonsLang
    implementation CommonsCollections

    implementation Constants.TickerView

    testImplementation 'junit:junit:4.12'
}

//注意makeJar放在外层
//task makeJar(type: Jar, dependsOn: ['build']) {
//    println('========0=========')
//    destinationDir = file('build/outputs/jar/')
//    baseName = "AppSDK"
//    version = "1.0.0"
//    from('build/intermediates/classes/debug')
//    into('build/libs/')
//    exclude('**/BuildConfig.class')
//    exclude('**/BuildConfig\$*.class')
//    exclude('**/R.class')
//    exclude('**/R\$*.class')
//    include('**/*.class')
//}

//http://jcenter.bintray.com/

